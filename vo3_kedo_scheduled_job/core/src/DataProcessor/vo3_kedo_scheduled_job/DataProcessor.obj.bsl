
Функция СведенияОВнешнейОбработке() Экспорт
	
	ОбработкаНаименование   = ЭтотОбъект.Метаданные().Имя;	
	ОбработкаВерсия 		= "3.0.0.3"; //При каждом выпуске увеличиавть значение
	лВерсияБСП		 		= "2.4.5.71";
	
	МассивФоновыхЗаданий = ФоновыеЗаданияОбработки();
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(лВерсияБСП);
	ПараметрыРегистрации.Вставить("Вид",             ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Наименование",    ОбработкаНаименование);
	ПараметрыРегистрации.Вставить("Версия",          ОбработкаВерсия);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация",      ОбработкаНаименование);
	
	Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление        = НСтр("ru = '" + ФоновоеЗадание.Название + "'");
		НоваяКоманда.Идентификатор        = ФоновоеЗадание.Ключ;
		НоваяКоманда.Использование        = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
		НоваяКоманда.ПоказыватьОповещение = Истина;
		НоваяКоманда.Модификатор          = "";
		
	КонецЦикла;
	
	ДобавитьРазрешенияКВнешнимРесурсам(ПараметрыРегистрации);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ФоновыеЗаданияОбработки()
		
	Задания = Новый Массив;
	
	// ЭПД. В конфигурации есть подсистема ЭПД
	Если Метаданные.Константы.Найти("Saby_ИспользоватьЭПД") <> Неопределено Тогда 
		Задания.Добавить(ДанныеФоновогоЗадания("Загрузка ЭПД", "Saby_Загрузка ЭПД"));            
		Задания.Добавить(ДанныеФоновогоЗадания("Выгрузка ЭПД", "Saby_Выгрузка ЭПД"));            
	КонецЕсли;
	
	Задания.Добавить(ДанныеФоновогоЗадания("Обновление статусов"));     
	Задания.Добавить(ДанныеФоновогоЗадания("Автоматические операции")); 
	
	Возврат Задания;
	
КонецФункции

Функция ДанныеФоновогоЗадания(Название, Ключ = "")
	
	Если Не ЗначениеЗаполнено(Ключ) Тогда
		Ключ = Название;
	КонецЕсли;	
	
	Структура = Новый Структура;
	Структура.Вставить("Название", Название);
	Структура.Вставить("Ключ",     Ключ);
	
	Возврат Структура;
	
КонецФункции

Функция СписокСерверовSaby(ОтображатьГОСТСервера = Истина) Экспорт
	СписокСрв = Новый Массив();
	ДобавитьСервер(СписокСрв, "ie-1c.saby.ru", 			"online.saby.ru");
	ДобавитьСервер(СписокСрв, "fix-ie-1c.saby.ru", 		"fix-online.saby.ru");
	ДобавитьСервер(СписокСрв, "test-ie-1c.saby.ru", 	"test-online.saby.ru");
	ДобавитьСервер(СписокСрв, "pre-test-ie-1c.saby.ru", "pre-test-online.saby.ru");
    Если ОтображатьГОСТСервера Тогда
		ДобавитьСервер(СписокСрв, "ieg-1c.sbis.ru", 	"g.sbis.ru");
		ДобавитьСервер(СписокСрв, "fix-ieg-1c.sbis.ru","fix-g.sbis.ru");
		ДобавитьСервер(СписокСрв, "test-ieg-1c.sbis.ru","test-g.sbis.ru");
	КонецЕсли;
	ДобавитьСервер(СписокСрв, "online.sabytest.ru",         "online.sabytest.ru");
	Возврат СписокСрв;
КонецФункции

Процедура ДобавитьСервер(СписокСерверов, Адрес, Представление, Индекс = Неопределено)
	Сервер = Новый Структура;
	Сервер.Вставить("Значение", Адрес);
	Сервер.Вставить("Представление", Представление);
	Если Индекс <> Неопределено Тогда
		СписокСерверов.Вставить(Индекс, Сервер);
	Иначе	
		СписокСерверов.Добавить(Сервер);
	КонецЕсли;		
КонецПроцедуры 


Процедура ДобавитьРазрешенияКВнешнимРесурсам(ПараметрыРегистрации)
	
	МассивСерверов = СписокСерверовSaby();
	Для Каждого СтруктураСервера Из МассивСерверов Цикл
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS", СтруктураСервера.Значение, 443, СтруктураСервера.Значение);
		ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМодульКонфигурации(ИмяМодуля)
	НайденныйМодуль = Неопределено;
	Если НЕ Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
	    НайденныйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	КонецЕсли;
	Возврат НайденныйМодуль;
КонецФункции

Процедура ВыполнитьКоманду(Идентификатор, ПараметрыВыполненияКоманды = Неопределено) Экспорт
		
	ИмяСобытия  = "Запуск регламентного задания";
	Комментарий = "";
	
	Если СтрНайти(Идентификатор, "ЭПД", НаправлениеПоиска.СКонца) > 0 Тогда
		
		ВыполнитьРегламентноеЗаданиеЭПД(Идентификатор, ИмяСобытия, Комментарий);
		
	ИначеЕсли Идентификатор = "Обновление статусов" Тогда
		
		МодульКонфигурации = ПолучитьМодульКонфигурации("Saby_ФоновыеЗаданияСервер");
		Если МодульКонфигурации <> Неопределено Тогда
			Попытка
				МодульКонфигурации.АвтоматическоеОбновлениеСтатусов();
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
				ИмяСобытия	= "Ошибка выполнения регламентного задания";
				Комментарий	= ExtExceptionToMessage(Ошибка);
			КонецПопытки;
		КонецЕсли;  
		
	ИначеЕсли Идентификатор = "Автоматические операции" Тогда
		
		Попытка 
			ЭтоВнешняяОбработка = ЛОЖЬ;
			ИмяОбработки = "SABY";
			Если Метаданные.Обработки.Найти(ИмяОбработки) <> Неопределено Тогда 
				МодульОбработки = Обработки[ИмяОбработки].Создать();
			ИначеЕсли Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") <> Неопределено 
				И ЗначениеЗаполнено(Справочники["ДополнительныеОтчетыИОбработки"].НайтиПоНаименованию(ИмяОбработки))  Тогда 
				Обработка = Справочники["ДополнительныеОтчетыИОбработки"].НайтиПоНаименованию(ИмяОбработки);
				ИмяФайла = ПолучитьИмяВременногоФайла("epf");
				ДвоичныеДанные = Обработка.ХранилищеОбработки.Получить();
				ДвоичныеДанные.Записать(ИмяФайла);
				МодульОбработки = ВнешниеОбработки.Создать(ИмяФайла, Ложь); 
				ИмяОбработки = ИмяФайла;
				ЭтоВнешняяОбработка = Истина;
			Иначе 
				СтрокаСообщения = Нстр("ru = 'Не удалось определить местонахождение обработки SABY!'");
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;	
			МодульОбработки.ЗапуститьАвтоматическиеОперацииФоновыеЗадания(ИмяОбработки, ЭтоВнешняяОбработка);
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
			ИмяСобытия	= "Ошибка выполнения регламентного задания";
			Комментарий	= ExtExceptionToMessage(Ошибка);
		КонецПопытки;
		
	Иначе	
		ИмяСобытия	= "Ошибка выполнение регламентного задаяния";
		Комментарий	= "Не опознанный идентификатор";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		
		ЗаписьЖурналаРегистрации(
			"SABY "+ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			Неопределено, 
			Идентификатор,
			Комментарий,
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегламентноеЗаданиеЭПД(Идентификатор, ИмяСобытия, Комментарий)
	
	МодульКонфигурации = ПолучитьМодульКонфигурации("Saby_ТНОбщегоНазначенияСервер");		
		
	Если МодульКонфигурации <> Неопределено Тогда
		
		Попытка			
			МодульКонфигурации.ВыполнитьРегламентноеЗаданиеЭПД(Идентификатор);			
		Исключение
			
			ИнфОбОшибке = ИнформацияОбОшибке();
			Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
			ИмяСобытия	= "Ошибка выполнения регламентного задания ЭПД";
			Комментарий	= ExtExceptionToMessage(Ошибка);
			
		КонецПопытки;
		
	КонецЕсли; 
	
КонецПроцедуры


Функция has_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Возврат ЗначениеЗаполнено(get_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию));
КонецФункции

Функция get_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Если СтруктураИсточник = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Если ТипЗнч(СтруктураИсточник) = Тип("Структура") И (НЕ СтруктураИсточник.Свойство(ИмяСвойства)) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Значение = СтруктураИсточник[ИмяСвойства];
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция set_prop(СтруктураИсточник, СтруктураНазначения, ИмяСвойстваИсточник, ИмяСвойстваПриемник,ЗначениеПоУмолчанию = Неопределено) Экспорт
	ЗначениеИсточник = Get_Prop(СтруктураИсточник, ИмяСвойстваИсточник, ЗначениеПоУмолчанию);
	Если ЗначениеИсточник <> Неопределено Тогда
		СтруктураНазначения.Вставить(ИмяСвойстваПриемник, ЗначениеИсточник);
	КонецЕсли;
КонецФункции



Процедура УстановитьЗначениеОшибки(Ошибка, ПроверяемоеЗначение, ИмяРеквизита, ЗначениеРеквизита)
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Ошибка[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
КонецПроцедуры

Функция ExtException(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = "ExtExpception") Экспорт
	
	error = Новый Структура("type, message, detail, action, dump, stack", ?(type=Неопределено,"ExtExpception",type), message, detail, action, dump, Новый Массив);
	ИмяРеквизитаMsg = "message";
	
	Если parent = Неопределено Тогда
		Возврат error;
	КонецЕсли;

	CurrentStack = Новый Структура("type, " + ИмяРеквизитаMsg + ", detail, action, dump, traceback");
	ЗаполнитьЗначенияСвойств(CurrentStack, parent);
	
	УстановитьЗначениеОшибки(error, message, ИмяРеквизитаMsg, get_prop(parent, ИмяРеквизитаMsg));
	
	Если НЕ ЗначениеЗаполнено(detail) Тогда
		Если parent.type = "Exception" и ЗначениеЗаполнено(message) Тогда
			error.detail = get_prop(parent, ИмяРеквизитаMsg) + " " + get_prop(parent, "detail");
		иначе
			error.detail = get_prop(parent, "detail");
		КонецЕсли
	КонецЕсли;
	
	УстановитьЗначениеОшибки(error, type, "type", get_prop(parent, "type"));
	Если parent.Свойство("stack") И ТипЗнч(parent.stack) = Тип("Массив") Тогда
		error.stack = parent.stack;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(message) 
		ИЛИ ЗначениеЗаполнено(action) 
		ИЛИ ЗначениеЗаполнено(dump) 
		ИЛИ ЗначениеЗаполнено(detail) Тогда
		
		error.stack.Добавить(CurrentStack);
	Иначе
		ИмяРеквизита = "dump";
		УстановитьЗначениеОшибки(error, dump, ИмяРеквизита, get_prop(parent, ИмяРеквизита));
		УстановитьЗначениеОшибки(error, action, ИмяРеквизитаMsg, get_prop(parent, ИмяРеквизитаMsg));
	КонецЕсли;
	
	Возврат error;
КонецФункции

Функция ExtExceptGetReason(reason)
	Если reason.Причина = Неопределено Тогда
		Возврат reason;
	Иначе
		Возврат ExtExceptGetReason(reason.Причина);
	КонецЕсли;
КонецФункции

Функция ExtExceptionAnalyse(parent) Экспорт
	
	Если parent = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Попробуем из строки получить вложеный объек
		Возврат	ЗначениеИзСтрокиВнутр(parent.Описание);
	Исключение
		
		Попытка
			Причина	= ExtExceptGetReason(parent);
			message	= Причина.Описание;
			
			Возврат Новый Структура(
			"type, message, detail, action, dump, stack, traceback",
			"Exception",
			message,
			,,,
			parent.ИмяМодуля +" "+ parent.НомерСтроки
			);
		Исключение
			Возврат Новый Структура("message, dump", "Некорректный вызов исключения", parent);
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

Функция NewExtExceptionСтруктура(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	parentStruct = ExtExceptionAnalyse(parent);
	ОшибкаСтруктура = ExtException(parentStruct, message, detail, action, dump, type);
	Возврат ОшибкаСтруктура;
КонецФункции

Функция NewExtExceptionСтрока(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	ОшибкаСтруктура = NewExtExceptionСтруктура(parent, message, detail, action, dump, type);
	Возврат ЗначениеВСтрокуВнутр(ОшибкаСтруктура);
КонецФункции

Функция ExtExceptionToMessage(error) Экспорт
	ДеталиСообщения = get_prop(error, "detail", "");
	
	//Получим описание ошибки из структуры еррор
	Если ТипЗнч(ДеталиСообщения) = Тип("Структура") или ТипЗнч(ДеталиСообщения) = Тип("Соответствие") Тогда
        ОшибкаСообщения = get_prop(ДеталиСообщения, "error", "");
        Если ТипЗнч(ОшибкаСообщения) = Тип("Структура") или ТипЗнч(ОшибкаСообщения) = Тип("Соответствие") Тогда
            ДеталиСообщения = get_prop(ОшибкаСообщения, "message", "");
        КонецЕсли;
    КонецЕсли;
	
	//убедимся, что ДеталиСообщения - строка
	Если ТипЗнч(ДеталиСообщения) <> Тип("Строка") Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	Если error.message = ДеталиСообщения Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	
	Возврат error.message +" "+ ДеталиСообщения;
КонецФункции
