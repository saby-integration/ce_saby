
Функция СведенияОВнешнейОбработке() Экспорт
	
	ОбработкаНаименование		= ЭтотОбъект.Метаданные().Имя;
	ФоновоеЗаданиеНаименование1	= "Загрузка ЭТрН из СБИС";
	ФоновоеЗаданиеНаименование2	= "Выгрузка ЭТрН в СБИС";
	ФоновоеЗаданиеНаименование3	= "Обновление статусов";

	БезопасныйРежим			= Ложь;
	ОбработкаВерсия 		= "3.0.0.0";
	лВерсияБСП		 		= "2.4.5.71";
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(лВерсияБСП);
	ПараметрыРегистрации.Вставить("Вид", 			ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Наименование",	ОбработкаНаименование);
	ПараметрыРегистрации.Вставить("Версия",			ОбработкаВерсия);
	ПараметрыРегистрации.Вставить("БезопасныйРежим",	БезопасныйРежим);
	ПараметрыРегистрации.Вставить("Информация", 		ОбработкаНаименование);
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление=НСтр("ru = '"+ФоновоеЗаданиеНаименование1+"'");
	НоваяКоманда.Идентификатор=ФоновоеЗаданиеНаименование1;
	НоваяКоманда.Использование=ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение=Истина;
	НоваяКоманда.Модификатор="";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление=НСтр("ru = '"+ФоновоеЗаданиеНаименование2+"'");
	НоваяКоманда.Идентификатор=ФоновоеЗаданиеНаименование2;
	НоваяКоманда.Использование=ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение=Истина;
	НоваяКоманда.Модификатор="";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление=НСтр("ru = '"+ФоновоеЗаданиеНаименование3+"'");
	НоваяКоманда.Идентификатор=ФоновоеЗаданиеНаименование3;
	НоваяКоманда.Использование=ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение=Истина;
	НоваяКоманда.Модификатор="";

	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьМодульКонфигурации(ИмяМодуля)
	НайденныйМодуль = Неопределено;
	Если НЕ Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
	    НайденныйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);;
	КонецЕсли;
	Возврат НайденныйМодуль;
КонецФункции

Процедура ВыполнитьКоманду(Идентификатор, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	ФоновоеЗаданиеНаименование1	= "Загрузка ЭТрН из СБИС";
	ФоновоеЗаданиеНаименование2	= "Выгрузка ЭТрН в СБИС";
	ФоновоеЗаданиеНаименование3	= "Обновление статусов";
	
	ИмяСобытия		= "Запуск регламентного задания";
	Комментарий		= "";
	
	Если Идентификатор = ФоновоеЗаданиеНаименование1 Тогда
		МодульКонфигурации = ПолучитьМодульКонфигурации("Saby_ТНОбщегоНазначенияСервер");
		Если МодульКонфигурации <> Неопределено Тогда
			Попытка
				МодульКонфигурации.ЗагрузкаЭТрН();
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
				ИмяСобытия	= "Ошибка выполнения регламентного задания";
				Комментарий	= ExtExceptionToMessage(Ошибка);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли Идентификатор = ФоновоеЗаданиеНаименование2 Тогда
		МодульКонфигурации = ПолучитьМодульКонфигурации("Saby_ТНОбщегоНазначенияСервер");
		Если МодульКонфигурации <> Неопределено Тогда
			Попытка
				МодульКонфигурации.ВыгрузкаЭТрН();
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
				ИмяСобытия	= "Ошибка выполнения регламентного задания";
				Комментарий	= ExtExceptionToMessage(Ошибка);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли Идентификатор = ФоновоеЗаданиеНаименование3 Тогда
		МодульКонфигурации = ПолучитьМодульКонфигурации("Saby_ФоновыеЗаданияСервер");
		Если МодульКонфигурации <> Неопределено Тогда
			Попытка
				МодульКонфигурации.АвтоматическоеОбновлениеСтатусов();
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				Ошибка = ExtExceptionAnalyse(ИнфОбОшибке);
				ИмяСобытия	= "Ошибка выполнения регламентного задания";
				Комментарий	= ExtExceptionToMessage(Ошибка);
			КонецПопытки;
		КонецЕсли;
	Иначе	
		ИмяСобытия	= "Ошибка выполнение регламентного задаяния";
		Комментарий	= "Не опознанный идентификатор";
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		"SABY "+ИмяСобытия, 
		УровеньЖурналаРегистрации.Ошибка, 
		Неопределено, 
		Идентификатор,
		Комментарий,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
	);
	
КонецПроцедуры



Функция has_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Возврат ЗначениеЗаполнено(get_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию));
КонецФункции

Функция get_prop(СтруктураИсточник, ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Если СтруктураИсточник = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Если ТипЗнч(СтруктураИсточник) = Тип("Структура") И (НЕ СтруктураИсточник.Свойство(ИмяСвойства)) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Значение = СтруктураИсточник[ИмяСвойства];
	Если Значение = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция set_prop(СтруктураИсточник, СтруктураНазначения, ИмяСвойстваИсточник, ИмяСвойстваПриемник,ЗначениеПоУмолчанию = Неопределено) Экспорт
	ЗначениеИсточник = Get_Prop(СтруктураИсточник, ИмяСвойстваИсточник, ЗначениеПоУмолчанию);
	Если ЗначениеИсточник <> Неопределено Тогда
		СтруктураНазначения.Вставить(ИмяСвойстваПриемник, ЗначениеИсточник);
	КонецЕсли;
КонецФункции



Функция ExtException(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = "ExtExpception") Экспорт
	
	error = Новый Структура("type, message, detail, action, dump, stack", ?(type=Неопределено,"ExtExpception",type), message, detail, action, dump, Новый Массив);
	
	Если parent <> Неопределено Тогда
		CurrentStack = Новый Структура("type, message, detail, action, dump, traceback");
		ЗаполнитьЗначенияСвойств(CurrentStack, parent);
		Если НЕ ЗначениеЗаполнено(message) Тогда
			error.message = get_prop(parent, "message");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(detail) Тогда
			Если parent.type = "Exception" и ЗначениеЗаполнено(message) Тогда
				error.detail = get_prop(parent, "message") + " " + get_prop(parent, "detail");
			иначе
				error.detail = get_prop(parent, "detail");
			КонецЕсли
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(type) Тогда
			error.type = get_prop(parent, "type");
		КонецЕсли;
		
		Если parent.Свойство("stack") И ТипЗнч(parent.stack) = Тип("Массив") Тогда
			error.stack = parent.stack;
		КонецЕсли;
		Если ЗначениеЗаполнено(message) 
			ИЛИ ЗначениеЗаполнено(action) 
			ИЛИ ЗначениеЗаполнено(dump) 
			ИЛИ ЗначениеЗаполнено(detail) Тогда
			
			error.stack.Добавить(CurrentStack);
		Иначе
			Если НЕ ЗначениеЗаполнено(dump) Тогда
				error.dump = get_prop(parent, "dump"); 
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(action) Тогда
				error.action = get_prop(parent, "action");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат error;
	
КонецФункции

Функция ExtExceptGetReason(reason)
	Если reason.Причина = Неопределено Тогда
		Возврат reason;
	Иначе
		Возврат ExtExceptGetReason(reason.Причина);
	КонецЕсли;
КонецФункции

Функция ExtExceptionAnalyse(parent) Экспорт
	
	Если parent = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Попробуем из строки получить вложеный объек
		Возврат	ЗначениеИзСтрокиВнутр(parent.Описание);
	Исключение
		
		Попытка
			Причина	= ExtExceptGetReason(parent);
			message	= Причина.Описание;
			
			Возврат Новый Структура(
			"type, message, detail, action, dump, stack, traceback",
			"Exception",
			message,
			,,,
			parent.ИмяМодуля +" "+ parent.НомерСтроки
			);
		Исключение
			Возврат Новый Структура("message, dump", "Некорректный вызов исключения", parent);
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

Функция NewExtExceptionСтруктура(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	parentStruct = ExtExceptionAnalyse(parent);
	ОшибкаСтруктура = ExtException(parentStruct, message, detail, action, dump, type);
	Возврат ОшибкаСтруктура;
КонецФункции

Функция NewExtExceptionСтрока(parent = Неопределено, message = Неопределено, detail = Неопределено, action = Неопределено, dump = Неопределено, type = Неопределено) Экспорт
	ОшибкаСтруктура = NewExtExceptionСтруктура(parent, message, detail, action, dump, type);
	Возврат ЗначениеВСтрокуВнутр(ОшибкаСтруктура);
КонецФункции

Функция ExtExceptionToMessage(error) Экспорт
	ДеталиСообщения = get_prop(error, "detail", "");
	
	//Получим описание ошибки из структуры еррор
	Если ТипЗнч(ДеталиСообщения) = Тип("Структура") или ТипЗнч(ДеталиСообщения) = Тип("Соответствие") Тогда
        ОшибкаСообщения = get_prop(ДеталиСообщения, "error", "");
        Если ТипЗнч(ОшибкаСообщения) = Тип("Структура") или ТипЗнч(ОшибкаСообщения) = Тип("Соответствие") Тогда
            ДеталиСообщения = get_prop(ОшибкаСообщения, "message", "");
        КонецЕсли;
    КонецЕсли;
	
	//убедимся, что ДеталиСообщения - строка
	Если ТипЗнч(ДеталиСообщения) <> Тип("Строка") Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	Если error.message = ДеталиСообщения Тогда
		ДеталиСообщения = "";
	КонецЕсли;
	
	Возврат error.message +" "+ ДеталиСообщения;
КонецФункции
