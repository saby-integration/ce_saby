Функция ОпределитьТипМетаданных(ОбъектСсылка) Экспорт
	//Так быстрее чем поиск по метаданным всех типов
	МетаданныеФормы = ОбъектСсылка.Метаданные().Формы;
	Если МетаданныеФормы.Найти("ФормаДокумента") <> Неопределено Тогда
		Возврат "Документы";
	ИначеЕсли МетаданныеФормы.Найти("ФормаЭлемента") <> Неопределено Тогда
		Возврат "Справочники";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ОтобратьПоСпискуОбъектов(мОбъекты) Экспорт
	
	тОбъекты =	Новый ТаблицаЗначений;
	тОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов(Метаданные.РегистрыСведений.Saby_Состояние.Измерения.Объект.Тип.Типы()));
	
	Для Каждого ДокументСсылка Из мОбъекты Цикл
		НовСтрока = тОбъекты.Добавить();
		Если Найти(СокрЛП(ТипЗнч(ДокументСсылка)), "Регистр сведений ключ записи") > 0 Тогда 
			//В корп версии с формы списка сотрудников приходят не ссылки а строки регистра сведений
			НовСтрока.Объект	= ДокументСсылка.Сотрудник;
		Иначе
			НовСтрока.Объект	= ДокументСсылка;
		КонецЕСли;
	КонецЦикла;

	УстановитьПривилегированныйРежим (Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗДок.Объект КАК Объект
		|ПОМЕСТИТЬ ВР_
		|ИЗ
		|	&тОбъекты КАК ТЗДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВР_.Объект КАК Объект,
		|	ВЫБОР
		|		КОГДА СД.Объект ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОбменСоСбис,
		|	СД.UID КАК UID
		|ИЗ
		|	ВР_ КАК ВР_
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК СД
		|		ПО ВР_.Объект = СД.Объект";
	Запрос.УстановитьПараметр("тОбъекты", тОбъекты);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//На недалёкое будущее
	//РезультатЗапроса.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("Строка") );
	//РезультатЗапроса.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка") );
	//Для Каждого СтрокаРЗ ИЗ РезультатЗапроса Цикл
	//	СтрокаРЗ.ТипМетаданных	= ОпределитьТипМетаданных(СтрокаРЗ.Объект) ;
	//	СтрокаРЗ.ТипОбъекта		= СтрокаРЗ.Объект.Метаданные().Имя;
	//КонецЦикла;
	
	Возврат РезультатЗапроса;
КонецФункции	
	
Функция ПолучитьСостоянияОбъектов(tUID) Экспорт
	// входящие параметры - таблица значений ИдСБИС, ИмяСБИС
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	UIDs.UID КАК UID,
	|	ВЫРАЗИТЬ(UIDs.UID КАК СТРОКА(36)) КАК КлючДляСвязи
	|ПОМЕСТИТЬ ВР_UID
	|ИЗ
	|	&мUID КАК UIDs
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВР_UID.UID КАК UID,
	|	ЕСТЬNULL(СД.Объект, НЕОПРЕДЕЛЕНО) КАК Объект
	|ИЗ
	|	ВР_UID КАК ВР_UID
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Saby_Состояние КАК СД
	|		ПО ВР_UID.КлючДляСвязи = СД.SbisId ИЛИ ВР_UID.КлючДляСвязи = СД.UID";

	Запрос.Параметры.Вставить("мUID", tUID);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат =  Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("UID", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("LINK");
	Результат.Колонки.Добавить("APPROVED", Новый ОписаниеТипов("Булево, Null"));
	Результат.Колонки.Добавить("ИдСБИС", Новый ОписаниеТипов("Строка"));  // TODO удалить после обновления 2104
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтрока = Результат.Добавить();
		НовСтрока.UID = ВыборкаДетальныеЗаписи.UID;
		Если ВыборкаДетальныеЗаписи.Объект = Неопределено
			Или Не ОбщегоНазначения.ЭтоДокумент(ВыборкаДетальныеЗаписи.Объект.Метаданные()) Тогда 
			
			НовСтрока.APPROVED = Null;
		Иначе 
			НовСтрока.APPROVED = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Объект, "Проведен");
		КонецЕсли;
		НовСтрока.LINK = ВыборкаДетальныеЗаписи.Объект;
		НовСтрока.ИдСБИС = ВыборкаДетальныеЗаписи.UID;        // TODO удалить после обновления 2104
//		ПолучитьAPI3СсылкуИзСсылкиНаОбъект(ВыборкаДетальныеЗаписи.Объект, НовСтрока);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПрочитатьПоОбъекту(ОбъектИС) Экспорт
	Выборка = РегистрыСведений.Saby_Состояние.Выбрать(Новый Структура("Объект", ОбъектИС) );
	Пока Выборка.Следующий() Цикл
		Возврат Выборка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция Удалить(Объект) Экспорт
	НаборЗаписей = РегистрыСведений.Saby_Состояние.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
КонецФункции

Процедура УдалитьПоUID(UID, АктивныйЭтап="", Состояние=Неопределено, Объект=Неопределено, ИмяИС=Неопределено, ИдИС=Неопределено) Экспорт
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено и ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			Удалить(Объект);
		Иначе
			//Обновление нескольких Объектов с одинаковым - UID
			Выборка = ПрочитатьПоUID(UID);
			Пока Выборка.Следующий() Цикл
				Удалить(Выборка.Объект);
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		Удалить(Объект);
	КонецЕсли;
КонецПроцедуры

Функция ПрочитатьПоUID(UID) Экспорт
	Возврат РегистрыСведений.Saby_Состояние.Выбрать(Новый Структура("UID", UID));
КонецФункции

Процедура ОбновитьПоUID(UID, АктивныйЭтап="", Состояние=Неопределено, Объект=Неопределено, ИмяИС=Неопределено, ИдИС=Неопределено, СбисИд=Неопределено) Экспорт
	Если Объект = Неопределено Тогда
		Если ИмяИС <> Неопределено и ИдИС <> Неопределено Тогда
			Объект = ПолучитьСсылкуПоИдИС(ИмяИС, ИдИС);
			Обновить(UID, АктивныйЭтап, Состояние, Объект, СбисИд);
		Иначе
			//Обновление нескольких Объектов с одинаковым - UID
			Выборка = ПрочитатьПоUID(UID);
			Пока Выборка.Следующий() Цикл
				Обновить(UID, АктивныйЭтап, Состояние, Выборка.Объект, СбисИд);
			КонецЦикла;
		КонецЕсли;
	Иначе 	
		Обновить(UID, АктивныйЭтап, Состояние, Объект, СбисИд);
	КонецЕсли;
КонецПроцедуры

Процедура Обновить(UID, АктивныйЭтап="", Состояние=Неопределено, Объект, СбисИд) Экспорт
	
	Если Состояние = Неопределено Тогда
		
		СостояниеСсылка = Справочники.Saby_СостоянияОбъектов.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Состояние) = Тип("СправочникСсылка.Saby_СостоянияОбъектов") Тогда 	
		
		СостояниеСсылка = Состояние;
		
	Иначе 
	
		СостояниеСсылка = Справочники.Saby_СостоянияОбъектов.НайтиПоРеквизиту("ИдентификаторСБИС", Число(Состояние));
		
	КонецЕсли;
		
	МенеджерЗаписи	= РегистрыСведений.Saby_Состояние.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.Объект		= Объект; 
	МенеджерЗаписи.АктивныйЭтап	= АктивныйЭтап; 
	МенеджерЗаписи.Состояние	= СостояниеСсылка;
	МенеджерЗаписи.UID			= UID;
	МенеджерЗаписи.SbisId		= СбисИд;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);    
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение NewExtExceptionСтрока(ИнфОбОшибке,,,"Обновление статуса");
	КонецПопытки;
	
КонецПроцедуры


#Область include_core_base_Helpers
#КонецОбласти

Функция ПолучитьТикетТекущейСессии( context_params = Неопределено ) Экспорт
	Если context_params = Неопределено Тогда
		context_params = НастройкиПодключенияПрочитать();
	КонецЕсли;
	ТокенSID	= Новый Структура("sid", context_params.session );
	ОбработкаСБИС = Обработки.SABY.Создать();
	Тикет_ = ОбработкаСБИС.local_helper_api(context_params, "САП.GetTicketForCurrentSid", ТокенSID );
	Тикет	= "";
	Если ТипЗнч(Тикет_) = Тип("Строка") Тогда
		Тикет	= Тикет_;
	КонецЕсли;
	Возврат Тикет;
КонецФункции

#Область include_core_base_Helpers_НастройкиПодключения
#КонецОбласти  

#Область include_core_base_Helpers_ОбщиеНастройки
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриОбновленииМодуля
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеКЭДО
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеЕТРН
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапускеБольничные
#КонецОбласти

#Область include_base_ОбработчикиСобытий_ПриПервомЗапуске
#КонецОбласти

#Область include_base_НазваниеПродукта
#КонецОбласти

#Область include_core_base_ПроверкаВерсии_ПолучитьИмяФайлаИНомерТекущейВерсии
#КонецОбласти

#Область include_core_base_Helpers_РаботаСоСвойствамиСтруктуры
#КонецОбласти

#Область include_core_base_ExtException
#КонецОбласти

#Область include_core_src_DataProcessor_SABY_ОсобенностиПлатформы_РаботаСоСтроками
#КонецОбласти